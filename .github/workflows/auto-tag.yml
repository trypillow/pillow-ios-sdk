name: Auto Release on Version Change

on:
  push:
    branches:
      - main
    paths:
      - 'PillowSDK.podspec'
      - 'Sources/PillowSDK/PillowSDK.swift'

jobs:
  check-and-release:
    name: Check Version and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version_changed: ${{ steps.version_changed.outputs.changed }}
      version: ${{ steps.current_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to compare

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(grep -m 1 "s.version" PillowSDK.podspec | sed "s/.*'\(.*\)'.*/\1/")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Get previous version
        id: previous_version
        run: |
          git checkout HEAD~1
          PREV_VERSION=$(grep -m 1 "s.version" PillowSDK.podspec | sed "s/.*'\(.*\)'.*/\1/" || echo "0.0.0")
          git checkout -
          echo "version=$PREV_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $PREV_VERSION"

      - name: Check if version changed
        id: version_changed
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          PREVIOUS="${{ steps.previous_version.outputs.version }}"
          
          if [ "$CURRENT" != "$PREVIOUS" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Version changed from $PREVIOUS to $CURRENT"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️  Version unchanged: $CURRENT"
          fi

      - name: Check if tag already exists
        id: tag_exists
        if: steps.version_changed.outputs.changed == 'true'
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Tag v$VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag v$VERSION does not exist, proceeding with release"
          fi

      - name: Create tag
        if: steps.version_changed.outputs.changed == 'true' && steps.tag_exists.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "✅ Created and pushed tag v$VERSION"

      - name: Create release notes
        if: steps.version_changed.outputs.changed == 'true' && steps.tag_exists.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
            echo "$CHANGELOG" > release_notes.md
          else
            echo "Release v$VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See commit history for changes." >> release_notes.md
          fi

      - name: Create GitHub Release
        if: steps.version_changed.outputs.changed == 'true' && steps.tag_exists.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.current_version.outputs.version }}
          name: Release v${{ steps.current_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-cocoapods:
    name: Publish to CocoaPods
    needs: check-and-release
    if: needs.check-and-release.outputs.version_changed == 'true'
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.check-and-release.outputs.version }}

      - name: Install CocoaPods
        run: gem install cocoapods

      - name: Publish to CocoaPods Trunk
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        run: |
          pod trunk push PillowSDK.podspec --allow-warnings
